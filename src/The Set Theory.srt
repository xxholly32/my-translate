1
00:00:11,900 --> 00:00:12,866
大家好
hello everyone

2
00:00:12,933 --> 00:00:17,100
很高兴在 ViteConf 再次见到大家
it feels so good to be back here and see you again at the ViteConf

3
00:00:17,866 --> 00:00:20,733
今天我的主题是集合论
and today my topic is The Set Theory

4
00:00:21,000 --> 00:00:23,366
我知道这会稍微有些不明所以，但别担心
I know it's a bit random but don't worry

5
00:00:23,366 --> 00:00:25,133
稍后我会慢慢解释
I'll try to explain that later

6
00:00:26,666 --> 00:00:28,966
让我先简单介绍一下自己
so let me first introduce myself a bit

7
00:00:29,133 --> 00:00:30,566
我叫 Anthony Fu
my name is Anthony Fu

8
00:00:30,566 --> 00:00:33,500
我是 Vite, Vue 和 Nuxt 的核心团队成员
and I'm a core team member of Vite, Vue and Nuxt

9
00:00:34,133 --> 00:00:36,500
我还创建了一些开源项目
I'm also creating a few open source project

10
00:00:36,500 --> 00:00:41,433
我是 Vitest, Slidev, UnoCSS, VueUse, 和 Elk 的作者
and I'm a creator of Vitest, Slidev, UnoCSS, VueUse, and Elk

11
00:00:41,966 --> 00:00:44,966
我目前在 NuxtLabs 的框架团队工作
I'm currently working at NuxtLabs on the framework team

12
00:00:45,666 --> 00:00:47,300
回到我们的主题
so back to our topic

13
00:00:48,200 --> 00:00:51,200
作为一个在开源领域工作了一段时间的人
as someone who has been working on open source for a while

14
00:00:51,200 --> 00:00:52,400
并以此为生
and made a living

15
00:00:52,533 --> 00:00:53,700
我不得不说开源
I have to say that open source

16
00:00:53,700 --> 00:00:55,900
是非常有趣且值得做的
is so much fun and rewarding

17
00:00:56,400 --> 00:00:59,200
我相信你们中的很多人想为开源做贡献
I believe that many of you wanted to contribute to open source

18
00:00:59,200 --> 00:01:00,766
或已经在做了
or already doing so

19
00:01:01,533 --> 00:01:04,766
然而，有许多因素会影响
however there are so many factors that affect

20
00:01:04,766 --> 00:01:08,466
一个开源项目是否能够流行或成功
if an open source project could become popular or successful

21
00:01:08,566 --> 00:01:10,000
这取决于你如何定义它
depends on how you define it

22
00:01:10,900 --> 00:01:15,566
例如代码质量、文档、社区
for example the quality of code, the documentations, the community

23
00:01:15,666 --> 00:01:17,333
市场营销等等
the marketing and so on

24
00:01:18,133 --> 00:01:21,333
所有这些都是重要的并且彼此相关
all of them are important and related to each other

25
00:01:22,333 --> 00:01:26,533
没有一个可以让开源项目成功的黄金法则
there isn't a golden rule to make open source projects successful

26
00:01:27,533 --> 00:01:29,166
所以对于今天的主题
so for today's topic

27
00:01:29,166 --> 00:01:31,133
我想分享一些我的经验
I would like to share some my experience

28
00:01:31,200 --> 00:01:34,800
和在创建和维护开源项目方面的想法
and ideas on creating and maintaining open source projects

29
00:01:34,966 --> 00:01:37,900
结合一些我从社区中学到的知识
combining with some observations that I have learned from the community

30
00:01:39,466 --> 00:01:41,933
希望能帮助你开始自己的
hopefully it can help you to start your own

31
00:01:42,166 --> 00:01:43,500
开源之旅
open source journey

32
00:01:43,800 --> 00:01:47,000
或找到一些新的想法来改进你现有的项目
or find some new ideas to improve your existing project

33
00:01:48,866 --> 00:01:51,166
这将是一个系列的演讲
this is going to be a series of talk

34
00:01:51,300 --> 00:01:54,666
今天我想开始第一个主题
and today I would like to start the very first one of them

35
00:01:56,533 --> 00:01:59,300
今天的主题有点抽象
so today's topic is a bit abstract one

36
00:01:59,300 --> 00:02:01,366
我称之为集合论
I'd call it The Set Theory

37
00:02:01,766 --> 00:02:03,966
一种思考项目规划
a way of thinking on planning

38
00:02:04,000 --> 00:02:07,066
项目方向和路线图的方法
the directions and the roadmap of your project

39
00:02:08,200 --> 00:02:11,500
假设我们已经有了一个开源项目
so let's say we already have a open source project

40
00:02:11,500 --> 00:02:13,133
或者计划创建一个
or planning to create one

41
00:02:14,500 --> 00:02:16,000
稍微实际一些
to be a little bit practical

42
00:02:16,000 --> 00:02:19,066
我们可能希望获得一定数量的用户
we might want to gain certain amount of adoption

43
00:02:19,266 --> 00:02:20,500
或者我们只是希望
or just we want

44
00:02:20,733 --> 00:02:23,500
更多的人使用或享受我们的努力成果
more people to use or enjoy our hard work

45
00:02:24,533 --> 00:02:26,066
我们需要考虑的是
one of the things to consider

46
00:02:26,066 --> 00:02:28,733
如何建立用户画像
is how we picturing our target users

47
00:02:28,900 --> 00:02:32,666
例如，我的工具是面向终端用户还是开发者
for example is my tool for end users or developers

48
00:02:32,900 --> 00:02:36,200
是Vue用户还是React用户等
is that for Vue users or React users etc

49
00:02:37,800 --> 00:02:43,733
已知在我们所有的目标用户中
so we know that the fact that amounts all of our target user

50
00:02:44,133 --> 00:02:47,566
只有一部分人会成为我们的真实用户
only a portion of them will become our actual user

51
00:02:49,133 --> 00:02:51,933
为了获得更多的用户
in order to get more uses to our project

52
00:02:51,966 --> 00:02:53,166
我们可以尝试将
we could try to convert

53
00:02:53,166 --> 00:02:55,900
更多潜在用户转化为真实用户
more potential uses to the actual users

54
00:02:56,566 --> 00:02:59,533
也许通过一些市场营销或润色
maybe by doing some marketing or polishing

55
00:03:00,533 --> 00:03:02,000
在这种情况下
in that case the amount of

56
00:03:02,000 --> 00:03:04,733
目标用户的数量就成为了
target user you have accurate becomes the upper limit

57
00:03:04,733 --> 00:03:07,466
你可能拥有的真实用户的上限
of how many accurate user you could possibly have

58
00:03:08,133 --> 00:03:09,066
另一方面
on the other hand

59
00:03:09,166 --> 00:03:12,066
我们还可以尝试找到
we can also try to find a way to expand

60
00:03:12,066 --> 00:03:14,933
扩展我们的目标用户群的方法
our target user to include more people

61
00:03:15,900 --> 00:03:19,466
在这个思路下，让我们举一些例子
under this idea let's take at some examples that

62
00:03:19,900 --> 00:03:20,966
看看我们如何能做到这一点
how we could do that

63
00:03:22,700 --> 00:03:25,200
第一个我想给你们展现的例子是
the first example I'm going to show you is actually

64
00:03:25,200 --> 00:03:28,900
我在2019年做的第一个开源项目
my first open source project back in 2019

65
00:03:31,200 --> 00:03:34,366
这个项目叫做 VS Code-vue-i18n-ally
the repo name is called VS Code-vue-i18n-ally

66
00:03:34,766 --> 00:03:39,900
它是一个 VS Code 插件，帮助 Vue 开发者处理国际化 (i18n)
it's a VS Code extension for helping vue developers to working on i18n

67
00:03:40,066 --> 00:03:42,000
比如在代码中预览翻译
like preview translations in code

68
00:03:42,000 --> 00:03:44,500
或者管理每种语言的密钥等
or manage keys for each language etc

69
00:03:45,900 --> 00:03:48,366
这是扩展的截图
this is the screenshot of the extensions

70
00:03:48,366 --> 00:03:50,166
展示了基本功能
that shows the basic feature

71
00:03:50,766 --> 00:03:54,366
但扩展本身并不是我们今天的主题
well the extension itself isn't our main topic it today

72
00:03:56,100 --> 00:03:58,633
当时我渴望这个项目
at that times I am eager to make this project as

73
00:03:58,766 --> 00:04:02,166
尽可能流行，并想在开源社区中证明自己
popular as I want to prove myself in open source world

74
00:04:03,500 --> 00:04:05,300
我非常高兴当我获得了
I'm super happy when I got uh

75
00:04:06,200 --> 00:04:08,766
第一个100和200个GitHub stars
the first 100 and 200 stars on Github

76
00:04:08,766 --> 00:04:11,666
并收到了社区的赞赏
and received their appreciations from the community

77
00:04:12,466 --> 00:04:15,700
之后我开始寻求更高的目标
after that I start to seek for higher goals

78
00:04:16,533 --> 00:04:19,500
当时我梦想能够全职参与开源
back then I was dreaming to work full times open source

79
00:04:19,500 --> 00:04:21,300
就像尤雨溪那样
for example like Even you

80
00:04:22,100 --> 00:04:25,333
所以我的野心是做一些
so my ambitions was to make something

81
00:04:26,133 --> 00:04:28,366
和Vue一样流行的东西
popular as popular as Vue

82
00:04:28,533 --> 00:04:30,300
然后我突然意识到
then I suddenly saw

83
00:04:30,300 --> 00:04:33,400
我的项目和Vue的根本区别
the fundamental difference between my projects and Vue

84
00:04:34,533 --> 00:04:37,333
这直接反映在项目名称上
there directly reflects on the project names

85
00:04:37,766 --> 00:04:39,300
看下我的项目名称
look at my project names

86
00:04:39,500 --> 00:04:43,133
我们看到名称很长，并由多个部分组成
we saw that there is quite long and composed by multiple parts

87
00:04:44,200 --> 00:04:46,600
让我们每个部分拆解来看
let's break it down to see part by part

88
00:04:47,166 --> 00:04:50,266
首先，我们知道这是一个 VS Code 插件
so first we know that it's a VS Code extension

89
00:04:50,500 --> 00:04:54,733
这意味着只有 VS Code 用户会用这个插件
so basically means that only VS Code user would use this extension

90
00:04:55,266 --> 00:04:58,366
我们可以画一个圈，代表 VS Code 用户
we could draw a circle indicating the VS Code user here

91
00:04:59,466 --> 00:05:00,766
然后对于Vue
and then for Vue

92
00:05:00,966 --> 00:05:03,333
因为它是建立在我的需求之上的
uh because it's built on base on my need

93
00:05:03,733 --> 00:05:07,166
我们也可以画一个Vue的圈
um then we could have a Vue circle as well

94
00:05:08,200 --> 00:05:12,200
最后，这是一个国际化工具
and then finally this is the helper for internalization

95
00:05:12,500 --> 00:05:13,300
这意味着
meaning that

96
00:05:13,466 --> 00:05:16,466
并不是所有的Vue用户都会使用这个扩展
not all of the Vue users would use this extensions

97
00:05:16,466 --> 00:05:19,133
所以我们可以画另一个i18n的圈
so we could draw another circle for i18n

98
00:05:20,733 --> 00:05:22,100
然后我们发现
and then we find that

99
00:05:22,100 --> 00:05:27,400
我们的目标用户被限制在这三个圈的交集内
our target users are limited inside the intersection of these three circles

100
00:05:28,800 --> 00:05:29,600
意味着
meaning that

101
00:05:29,733 --> 00:05:33,400
只有在做i18n应用程序的Vue开发者
only Vue developers who are working on an i18n app

102
00:05:33,400 --> 00:05:35,366
并且正好使用 VS Code
that happen to choose VS Code

103
00:05:35,366 --> 00:05:36,566
作为他们的编辑器
as their editor

104
00:05:36,766 --> 00:05:38,600
才会尝试这个扩展
would ever try this extension

105
00:05:40,800 --> 00:05:42,300
这听起来相当有限
that sounds quite limited

106
00:05:42,500 --> 00:05:46,600
这我称之为交集现象
this is the phenomenon I call the intersections

107
00:05:51,000 --> 00:05:52,800
在深入探讨解决方案之前
before we dive into the solution

108
00:05:53,266 --> 00:05:55,100
让我们看看这个图
let's have a look at this graph

109
00:05:56,166 --> 00:05:58,766
其他的交集意味着什么
what would the other intersections mean

110
00:05:59,566 --> 00:06:01,100
我们很快就能意识到
we could soon realize that

111
00:06:01,166 --> 00:06:03,700
VS Code 和 Vue 的交集
the intersection between VS Code and Vue

112
00:06:03,700 --> 00:06:05,000
实际上是 Volar
is actually Volar

113
00:06:05,566 --> 00:06:07,400
或者当时是Vetur
or Vetur at that time

114
00:06:07,800 --> 00:06:10,000
就是 VS Code 对 Vue 的 IDE 支持
the VS Code IDE support for Vue

115
00:06:11,566 --> 00:06:13,733
因此我们知道
as the result, we know that

116
00:06:13,766 --> 00:06:16,600
Vetur 和 Volar 有很大的用户群
Vetur and Volar have a huge user base

117
00:06:16,666 --> 00:06:18,900
因为 Vue 和 VS Code 都有
because both Vue and VS Code have

118
00:06:18,966 --> 00:06:20,766
足够大的社区
huge enough communities

119
00:06:20,866 --> 00:06:23,733
使得它们的交集足够大
making the intersections large enough

120
00:06:25,200 --> 00:06:26,166
同样地
similarly

121
00:06:26,300 --> 00:06:29,766
我们看到 Vue 和 i18n 的交集
we see that the intersection between Vue and i18n

122
00:06:30,133 --> 00:06:31,966
是像 vue-i18n 这样的项目
are the projects like Vue-i18n

123
00:06:32,066 --> 00:06:33,666
也非常受欢迎
which are also super popular

124
00:06:35,733 --> 00:06:40,100
所以当涉及到 VS Code 和 i18n 的交集
so when it comes to the intersection between VS Code and i18n

125
00:06:40,600 --> 00:06:43,933
我们看到当时似乎没有这样的项目
we see that there seems to be no such project at that time

126
00:06:45,400 --> 00:06:47,000
直截了当的想法
a straightforward thinking

127
00:06:47,533 --> 00:06:48,900
可以做一个，对吧？
that be that one right

128
00:06:49,666 --> 00:06:50,933
实际上，我们可以
in practice, we could

129
00:06:50,933 --> 00:06:53,700
尝试做一个扩展与Vue解耦
try to make the extension decoupled from Vue

130
00:06:54,600 --> 00:06:57,400
这样它也可以被其他框架使用
so it could be used by the other frameworks as well

131
00:06:58,133 --> 00:07:01,166
简而言之，让它变得通用
in short, let's make it universal

132
00:07:01,166 --> 00:07:06,333
通过打破这些圈子，扩大交集
by breaking the set circles and expanding the intersections

133
00:07:09,200 --> 00:07:10,300
我就是这样做的
and that's how I did

134
00:07:10,533 --> 00:07:12,933
我花了一些时间做了一个大的重构
I took some time to do a huge refactor

135
00:07:13,166 --> 00:07:17,066
设计了一个插件接口，使核心功能变得通用
designed a plugin interface to make the core feature universal

136
00:07:17,066 --> 00:07:21,900
在1.0版本我将项目名称从 vue-i18n-ally 改为 i18n-ally
at 1.0 I renamed the projects from Vue-i18n-Ally to i18n-Ally

137
00:07:22,500 --> 00:07:24,366
从一个仅限 Vue 的扩展
from a Vue-only extension

138
00:07:24,400 --> 00:07:30,200
变为支持多个框架的 VS Code 通用 i18n 助手
to a universal i18n helper for VS Code that supports a wide range of frameworks

139
00:07:30,333 --> 00:07:33,200
现在支持 React 和 Angular
now say React and Angular

140
00:07:33,200 --> 00:07:35,266
它还支持一些后端框架
it also includes backend frameworks

141
00:07:35,266 --> 00:07:39,733
如Laravel，Ruby on Rails，甚至是一些本地框架
like Laravel, Ruby on Rails, and even native target frameworks

142
00:07:40,533 --> 00:07:43,400
它们是可定制和可扩展的
and they are customizable and extendable as needed

143
00:07:45,966 --> 00:07:47,933
所以谈到数量
so when it comes to numbers

144
00:07:48,000 --> 00:07:49,366
我们可以清楚地看到
we can clearly see

145
00:07:49,466 --> 00:07:53,766
在我们发布时的star数有显著增加
a step increase of our stars at the times we doing the release

146
00:07:54,100 --> 00:07:57,366
在发布的一个月内，star数几乎翻倍
the stars almost doubled in a month at that time

147
00:08:01,766 --> 00:08:05,333
所以，让我们谈谈我们的老朋友 Vite
so, um, let's talk a bit about our old friend Vite

148
00:08:06,100 --> 00:08:07,100
这是一个故事
this is a story

149
00:08:07,100 --> 00:08:09,500
可能大多数人已经熟悉了
that's probably most of you are already familiar with

150
00:08:10,333 --> 00:08:13,100
最初，当Evan刚开始的时候 
um, initially Vite was an experiment on

151
00:08:13,333 --> 00:08:16,933
Vite是一个仅Vue开发的工具
a development tool for Vue when Evan first started

152
00:08:17,733 --> 00:08:19,700
当这个想法似乎奏效时
when an idea seems to be working out

153
00:08:19,966 --> 00:08:23,066
尤雨溪 决定让它成为与框架无关的工具
Evan decided to make it framework-agnostic by

154
00:08:23,266 --> 00:08:25,933
通过提取Vue的处理并制作插件
extracting Vue's handling into a plugin

155
00:08:26,166 --> 00:08:27,666
并优化API
and polishing the API

156
00:08:28,200 --> 00:08:30,333
然后我们有了今天的Vite
and then we have the Vite we know today

157
00:08:32,066 --> 00:08:33,766
我得说Vite成功了
I'd say Vite success

158
00:08:33,766 --> 00:08:36,666
结果远远超出了我的起初想象
turns out to be far beyond my initial imagination

159
00:08:38,100 --> 00:08:41,600
现在它有了一个极其庞大的社区和生态系统
it now has an incredibly huge community and ecosystem

160
00:08:41,966 --> 00:08:45,133
基本上，所有现代元框架都建立在它之上
basically, all modern meta-frameworks are built on top of it

161
00:08:45,533 --> 00:08:48,366
并且跨多个框架和社区的合作
and collaboration across multiple frameworks and communities

162
00:08:48,366 --> 00:08:49,733
真的非常出色
are really outstanding

163
00:08:50,800 --> 00:08:53,133
还有很多其他因素使得
there are many other factors that make

164
00:08:53,133 --> 00:08:55,266
Vite达到了今天的成就
Vite reach what it is today

165
00:08:55,700 --> 00:08:57,600
但我会说，具有可扩展性
but I would say, being extendable

166
00:08:57,733 --> 00:08:59,966
和框架无关性，确实拓宽了大门
and agnostic really widened the door

167
00:08:59,966 --> 00:09:02,100
让社区加入和贡献
for the community to join and contribute

168
00:09:04,700 --> 00:09:06,933
这部分的结论是，我们可以
the takeaway in this section is that we could

169
00:09:06,933 --> 00:09:09,733
寻求打破交集的可能性
seek for the possibility of breaking the intersection

170
00:09:09,733 --> 00:09:11,966
并使我们的项目变得通用
and make our projects universal

171
00:09:12,566 --> 00:09:14,866
以下是我能想到的一些好处
here are some of the benefits I could think of

172
00:09:15,200 --> 00:09:17,300
通过使我们的程序变得通用
by making our program universal

173
00:09:17,400 --> 00:09:20,866
意味着我们可以接触到更大的用户群体并且
meaning we could reach out to a larger user base and

174
00:09:20,866 --> 00:09:22,900
自然地我们会有更多的贡献者
naturally we would have a more contributor

175
00:09:22,900 --> 00:09:25,000
加入我们并一起工作
to join the force and work together

176
00:09:25,533 --> 00:09:28,200
而不是每个人都在做自己的解决方案
instead of everyone working on their own solutions that

177
00:09:28,200 --> 00:09:29,900
不兼容彼此的解决方案
aren't compatible with each other

178
00:09:31,866 --> 00:09:33,300
试图重构事物
trying to refactor things

179
00:09:33,300 --> 00:09:35,866
因为通用性也帮助我们
because universals also help us to

180
00:09:36,100 --> 00:09:39,066
修订我们的设计和抽象
revise our design and abstractions

181
00:09:40,200 --> 00:09:45,266
并且我们通常可以最终得到一个更易维护和可扩展的架构
and often we could end up with a more maintainable and extendable architecture

182
00:09:46,566 --> 00:09:48,700
最后，如果你的
and finally if your

183
00:09:48,700 --> 00:09:51,800
项目开始得到更多用户的使用和各种需求
projects start to get more users usage from various need

184
00:09:52,233 --> 00:09:59,233
任何对我们项目的改进都可能最终使得任何人在生态中受益
making any improvements in our projects could end up benefit anyone in the ecosystem

185
00:10:01,766 --> 00:10:06,866
我们知道，通用性有很多好处
so we know that being universal has a lot of great benefits

186
00:10:07,133 --> 00:10:11,300
但实际上，特定化也不是一件坏事
but actually being specific is also not a bad thing

187
00:10:13,466 --> 00:10:16,533
我能想到的一个很好的例子是Nuxt
one of the great examples I could think of is Nuxt

188
00:10:16,933 --> 00:10:19,766
Nuxt是一个Vue的特例
Nuxt is a metaphor that specific to Vue

189
00:10:20,500 --> 00:10:22,800
在选择Nuxt的众多好处中
out of many benefits of choosing Nuxt

190
00:10:22,800 --> 00:10:26,133
我想强调的一点是开发者体验
one thing I'd like to highlight is the developer experience

191
00:10:27,600 --> 00:10:32,566
在Nuxt我们提供了很多功能，帮助你以更好更快地构建应用
in Nuxt we provide quite a lot features to help you build apps faster in a better organized way

192
00:10:33,466 --> 00:10:37,566
我们有服务器端渲染以获得更好的用户体验和SEO
we have server side rendering for better user land performance and SEO

193
00:10:38,500 --> 00:10:41,100
基于文件的路由以获得更好的代码结构
and file based routing for better organization

194
00:10:41,266 --> 00:10:44,766
我们还拥有一个强大的模块系统用于集成
we also have a powerful module systems for integrations

195
00:10:44,800 --> 00:10:47,500
以及Nuxt Devtools 等等
and also Nuxt Devtools etc

196
00:10:49,200 --> 00:10:55,466
许多这些功能都是假设我们使用Vue并且有打包管道构建的
many of these are built with the assumption that we use Vue and has the bundling pipeline

197
00:10:56,400 --> 00:11:00,000
Nuxt还使用Vite作为默认的开发服务器和打包器
Nuxt also use Vite as the default dev server and bundler

198
00:11:00,466 --> 00:11:07,033
这意味着我们继承了Vite的优秀插件生态系统和快速的HMR
meaning that we inherit the great plugin ecosystem as well as the fast HMR from Vite

199
00:11:08,933 --> 00:11:12,166
对于Nuxt而言，相比 Vite 它的需求更特殊
for Nuxt to be a bit specific than Vite

200
00:11:12,300 --> 00:11:15,200
需要我们做更多很酷的功能和集成
allowing us to bring many cool features and integrations that

201
00:11:15,266 --> 00:11:17,700
很难以通用的方式实现
will be hard to achieve in a universal way

202
00:11:18,766 --> 00:11:20,066
我认为这就是为什么
I think that's why

203
00:11:20,300 --> 00:11:26,966
有许多像Sveltekit、Astro和Solid 这样的特殊需求
that's also why we have many metaphor like Sveltekit, astro and Solid for different needs

204
00:11:28,933 --> 00:11:29,533
在这里
and here

205
00:11:29,533 --> 00:11:32,700
让我们看看Nuxt提供的一些功能
let's look into a couple of features that Nuxt provides

206
00:11:34,800 --> 00:11:38,300
当我们谈论服务器端渲染和服务器API时
when we talk about server side rendering and server APIs

207
00:11:38,500 --> 00:11:40,666
我们知道在某些情况下
we know that in some cases

208
00:11:40,733 --> 00:11:44,500
我们需要服务器以某种形式与前端一起工作
we need a servers in some form to work together with the frontend

209
00:11:44,866 --> 00:11:47,600
除了自托管的Node.js服务器之外
other than a self-hosted Node.js server

210
00:11:47,600 --> 00:11:49,566
还有许多服务存在
there are also many services out there

211
00:11:49,933 --> 00:11:54,533
例如Cloudflare、Netlify、Vercel等
for example like Cloudflare, Netlify, Vercel etc

212
00:11:55,266 --> 00:11:58,200
为了充分利用每个提供者的潜力
to leverage the full potential of each provider

213
00:11:58,266 --> 00:11:59,900
我们可能希望利用它们提供的
we might want to utilize the

214
00:12:00,066 --> 00:12:03,700
边缘渲染和无服务器函数
edge rendering and serverless functions based on what they provide

215
00:12:04,966 --> 00:12:06,500
需要注意的一点是
one thing to note is that

216
00:12:06,500 --> 00:12:08,766
每个提供者都有自己的格式
each provider has its own format

217
00:12:09,100 --> 00:12:12,133
有些还附带特定的工具
some might also come with a specific tooling

218
00:12:13,033 --> 00:12:17,200
在Nuxt中，我们不希望我们的用户被限制在单一平台上
in Nuxt, we don't want our users to be stuck on a single platform

219
00:12:17,266 --> 00:12:21,100
我们希望支持尽可能多的平台
we want to support as many platforms as possible building

220
00:12:22,266 --> 00:12:25,866
因此我们构建了并支持自动检测
so we build and even supports auto detection

221
00:12:26,000 --> 00:12:27,700
因此应用程序可以
so the app can be written

222
00:12:27,733 --> 00:12:30,800
以同构方式编写并部署到各种平台上
isomorphically and deploy to various platforms

223
00:12:30,866 --> 00:12:33,133
无需更改任何配置
without changing any configuration

224
00:12:33,800 --> 00:12:35,200
然后我们意识到
and then we realized

225
00:12:35,200 --> 00:12:36,100
这是一个
this is a problem

226
00:12:36,100 --> 00:12:38,900
可能每个元框架都必须处理的问题
that's probably every meta framework has to deal with

227
00:12:39,400 --> 00:12:41,666
它不必是Nuxt特有的
and it doesn't have to be Nuxt specific

228
00:12:42,166 --> 00:12:46,000
所以我们将这些提取为一个标准工具，称为Nitro
so we extracted those into a standard tool called Nitro

229
00:12:47,000 --> 00:12:51,500
它是一个通用的服务器构建工具，就像Vite，但用于服务器
it's a universal server builder and it's pretty much like Vite but for servers

230
00:12:52,266 --> 00:12:56,300
使用Nitro处理服务器相关的细节
with Nitro taking care of the details of dealing with servers

231
00:12:56,366 --> 00:13:00,133
它实际上需要Nuxt拥有一个更清晰的架构
it actually allows Nuxt to have a more clear architecture

232
00:13:00,266 --> 00:13:03,900
用于处理服务器端渲染和API等
for handling server-side rendering and the APIs etc

233
00:13:05,733 --> 00:13:09,600
由于Nitro是一个通用的服务器工具
and since Nitro is a general-purpose server tool

234
00:13:09,933 --> 00:13:12,900
我们看到越来越多的元框架开始使用它
we see more and more meta framework starting to use it

235
00:13:13,300 --> 00:13:14,800
所有新的框架
all new frameworks

236
00:13:15,200 --> 00:13:16,900
开始在其上构建
start to build on top of it

237
00:13:17,600 --> 00:13:20,700
我们有一个很受欢迎的Angular元框架Analog
we have analog a popular angular Metaphone

238
00:13:20,733 --> 00:13:22,266
已经迁移到Nitro
has migrate to Nitro

239
00:13:22,800 --> 00:13:26,000
Stacks是一个框架无关的框架
Stacks a firmwork agnostic for step framework

240
00:13:26,733 --> 00:13:28,400
即使没有框架
even without a framework

241
00:13:28,400 --> 00:13:36,666
我发现Nitro在构建纯API服务器并部署到运行时非常方便
I also find Nitro to be very handy to build a pure API server and to deploy on the edge run time

242
00:13:37,000 --> 00:13:43,000
我们还听说有些框架正在迁移到Nitro
we also heard that there are some frameworks is in the process of migrating to Nitro

243
00:13:43,000 --> 00:13:46,400
我会保密，直到他们正式发布
I'll keep it as secret until they do the announcement

244
00:13:47,966 --> 00:13:50,800
类似地，在构建工具方面
similarly in terms of a bundling tools

245
00:13:51,100 --> 00:13:53,966
Nuxt 2是基于webpack构建的
Nuxt 2 has built on top of webpack

246
00:13:54,333 --> 00:13:59,033
所以在Nuxt 3中，我们希望保持兼容性和便于迁移
so in Nuxt 3 we want to keep that for compatibles and easy migration

247
00:13:59,133 --> 00:14:03,533
同时我们也喜欢Vite的创新和开发体验
while we also love the innovations and develop experience on Vite

248
00:14:04,300 --> 00:14:06,100
所以我们尝试支持
so we try to support

249
00:14:06,900 --> 00:14:08,900
两种工具可以互换使用
both tools interchangeably

250
00:14:10,900 --> 00:14:13,133
我们为两者提供了初步集成
we provide the first part of integration for both

251
00:14:13,300 --> 00:14:16,933
webpack和Vite都预配置了Nuxt
webpack and Vite pre configured for Nuxt

252
00:14:16,933 --> 00:14:20,500
所以理想情况下，应用程序在两者中都会一样工作
so ideally the app would work the same for both tools

253
00:14:21,366 --> 00:14:23,600
然而我们知道
however we know that

254
00:14:23,666 --> 00:14:28,266
这两者在架构和生态系统方面有很大的不同
the architectural as well as the ecosystems are quite different in them

255
00:14:29,166 --> 00:14:33,933
例如，如果我们想在我们的功能中添加一些模块转换
for example if we want to add some transformations to some modules in our pipeline

256
00:14:34,433 --> 00:14:38,700
这实际上意味着我们需要为每个插件格式实现逻辑
that actually means we need to implement the logic toys for each plugging format

257
00:14:38,766 --> 00:14:40,900
这会使我们的工作量翻倍
that would basically doubles our work

258
00:14:40,933 --> 00:14:44,466
以及会影响到社区模块的开发者们
as well as the effort for community modules to support them

259
00:14:45,366 --> 00:14:49,333
所以这就是我们创建unplugin的初衷
that's theinitial motivation for us to create unplugin

260
00:14:49,933 --> 00:14:51,166
一个通用
an universal

261
00:14:51,500 --> 00:14:54,966
统一的插件接口，用于webpack和Vite
unified plugging interface for both webpack and Vit

262
00:14:56,200 --> 00:14:57,200
有了它，我们
with that we are

263
00:14:57,200 --> 00:15:01,866
能够节省很多处理每个工具的不对齐细节的工作
able to save a lot of effort sticking into the details of misalignment for each tool

264
00:15:02,500 --> 00:15:06,066
并且由于unplugin被提取为一个独立工具
and since unplugin get extracted as a standalone tool

265
00:15:06,133 --> 00:15:09,700
它也形成了自己的社区并扩大了范围
it also forms its own community and expand the scope

266
00:15:09,866 --> 00:15:13,133
比如，支持Rollup、Esbuild和Rspack
uh to also support Rollup、esbuild and Rspack

267
00:15:13,166 --> 00:15:15,133
未来可能会支持更多
and possibly more in the future

268
00:15:17,866 --> 00:15:21,533
由于unplugin社区的努力
with the work done by the unplugin community

269
00:15:21,533 --> 00:15:27,766
它也为Nuxt开始实验Rspack作为打包器开辟了道路
it also opens the door for Nuxt to start experimenting the support for Rspack as the bundler

270
00:15:31,700 --> 00:15:33,500
这些只是两个例子
and those are just two examples

271
00:15:34,000 --> 00:15:37,500
我们还有unjs社区提供的许多高质量工具
we also have unjs community that's providing many high quality tools

272
00:15:37,733 --> 00:15:41,666
贯穿整个JavaScript生态系统
throughout the entire JavaScript ecosystem

273
00:15:42,600 --> 00:15:48,533
Nitro和unplugin也是unjs社区的一部分
and we'll actually have Nitro and unplugin as part of the unjs community

274
00:15:49,333 --> 00:15:54,266
我们还有一个Vite Node，从我们的服务器端代码执行器中诞生
we also have Vite Node made from our server side code executors

275
00:15:54,300 --> 00:15:58,500
后来成为了Vitest的核心引擎
and later becomes the core engine of Vitest and make it possible

276
00:15:59,933 --> 00:16:02,733
这些工具是从Nuxt的需求中产生的
those tools are created from Nuxt need

277
00:16:03,100 --> 00:16:06,100
但后来我们提取它们并使其通用
but later we extract them and make them universal

278
00:16:06,200 --> 00:16:09,866
它们形成了自己的社区和生态系统
they have formed their own community and ecosystem 

279
00:16:09,933 --> 00:16:14,466
可以惠及更广泛的用户和场景
that can benefit much wider range of users and scenario

280
00:16:14,866 --> 00:16:19,300
Nuxt 只是一个给用户更好开发体验的框架
Nuxt can be the fireworks that s a bit specific by providing better experience

281
00:16:19,500 --> 00:16:25,433
同时底层工具可以与其他框架和社区共享和合作
while the underlying tools can be shared and collaborate with other frameworks and community

282
00:16:26,866 --> 00:16:29,133
这就是开源的神奇之处，不是吗
that's where make open source amazing isn't it

283
00:16:31,366 --> 00:16:34,766
和我们谈论的集合交集不同的是
so the difference from set intersection we are talking about

284
00:16:34,933 --> 00:16:37,066
我想称之为集合并集
I'd like to call it the set union

285
00:16:37,600 --> 00:16:39,500
我们在追求通用部分
we struggle the universal part

286
00:16:39,700 --> 00:16:42,300
扩大范围以发展社区
expanding the scope to grow the community

287
00:16:42,500 --> 00:16:46,100
这最终也会回馈给我们自己
and also would eventually benefit back to ourselves

288
00:16:48,500 --> 00:16:51,466
所以总结今天的主题
so to wrap up with today's topic

289
00:16:51,866 --> 00:16:53,300
我们提出了一个想法
we bought up an idea

290
00:16:53,933 --> 00:16:56,100
我称之为集合论
I would call it the set theory

291
00:16:56,133 --> 00:16:59,000
由两个部分组成
and is composed with two sections

292
00:16:59,266 --> 00:17:01,666
集合交集和集合并集
the set intersection and set union

293
00:17:02,266 --> 00:17:03,266
在交集中
in the intersection

294
00:17:03,266 --> 00:17:07,633
我们了解到我们不应该只把项目限制在一个小众领域
we Learned that we shouldn't limit our project to only be a niche spot

295
00:17:08,266 --> 00:17:12,166
我们应该主动寻求使项目通用的可能性
we should proactively seeking for the possibility to making the project universal

296
00:17:12,533 --> 00:17:15,466
通过破圈和扩大范围
by breaking the circles and enlarge our scopes

297
00:17:17,400 --> 00:17:18,600
在并集中
and in the union

298
00:17:18,666 --> 00:17:23,600
我们学习到即使事物存在本质区别即存在特殊性
we learned that even something have to be a little bit specific in order to achieve something great

299
00:17:23,900 --> 00:17:26,266
我们仍然可以寻求
we could still seek for the

300
00:17:26,400 --> 00:17:29,766
我们可以做出的潜在联合
potential union that we could make

301
00:17:29,766 --> 00:17:33,366
以扩大社区和惠及整个生态系统
to expand the community and benefit the whole ecosystem

302
00:17:34,566 --> 00:17:38,266
这就是关于合作和社区
and that's all about collaboration and community

303
00:17:38,966 --> 00:17:43,333
我坚信开源是我们建设更美好世界的方式
I have a strong belief that open source would be the way for us to build a better world

304
00:17:44,300 --> 00:17:49,633
我期待看到更多具有类似心态的开源项目
and I'm looking forward to see more and more open source building with similar mindset

305
00:17:50,700 --> 00:17:51,900
这就是我演讲的全部内容
and that's all for my talk

306
00:17:53,266 --> 00:17:54,066
谢谢
thank you

